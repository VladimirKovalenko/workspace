import java.util.Scanner;

public class Main_8 {

	public static int method = 11;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		switch (method) {
		case 0:
			test0();
			break;
		case 1:
			test1();
			break;
		case 2:
			test2();
			break;
		case 3:
			test3();
			break;
		case 4:
			test4();
			break;
		case 5:
			test5();
			break;
		case 6:
			test6();
			break;
		case 7:
			test7();
			break;
		case 8:
			test8();
			break;
		case 9:
			test9();
			break;
		case 10:
			test10();
			break;
		case 11:
			test11();
			break;
		case 12:
			test12();
			break;
		case 13:
			test13();
			break;
		case 14:
			test14();
			break;
		case 15:
			test15();
			break;
		case 16:
			test16();
			break;
		default:
			System.out.println("Invalid numbre of test");
		}
	}

	/*
	 * Создайте массив из всех чётных чисел от 2 до 20 и выведите элементы
	 * массива на экран сначала в строку, отделяя один элемент от другого
	 * пробелом, а затем в столбик (отделяя один элемент от другого началом
	 * новой строки). Перед созданием массива подумайте, какого он будет
	 * размера. 2 4 6 … 18 20 2 4 6 … 20
	 */
	public static void test0() {
		int ma[] = new int[10];
		for (int i = 2, j = 0; i <= 20; i = i + 2, j++) {
			ma[j] = i;
			System.out.print(i + " ");
		}
		System.out.println();
		for (int i = 0; i < ma.length; i++)
			System.out.println(ma[i]);

	}

	/*
	 * Создайте массив из всех нечётных чисел от 1 до 99, выведите его на экран
	 * в строку, а затем этот же массив выведите на экран тоже в строку, но в
	 * обратном порядке (99 97 95 93 … 7 5 3 1).
	 */
	public static void test1() {
		int mas[] = new int[50];
		for (int i = 1, j = 0; j < 50; i = i + 2, j++) {
			mas[j] = i;
			System.out.print(mas[j] + " ");
		}
		System.out.println();
		for (int i = 49; i != 0; i--)
			System.out.print(mas[i] + " ");
	}

	/*
	 * Создайте массив из 15 случайных целых чисел из отрезка [0;9]. Выведите
	 * массив на экран. Подсчитайте сколько в массиве чётных элементов и
	 * выведете это количество на экран на отдельной строке.
	 */
	public static void test2() {
		int counter = 0;
		int mas[] = new int[15];
		for (int i = 0; i < 15; i++) {
			mas[i] = (int) Math.round(Math.random() * 9);
			System.out.print(mas[i] + " ");
			if (mas[i] % 2 == 0)
				counter++;
		}
		System.out.println("\n" + counter);
	}

	/*
	 * Создайте массив из 8 случайных целых чисел из отрезка [1;10]. Выведите
	 * массив на экран в строку. Замените каждый элемент с нечётным индексом на
	 * ноль. Снова выведете массив на экран на отдельной строке.
	 */
	public static void test3() {
		int mas[] = new int[8];
		for (int i = 0; i < 8; i++) {
			mas[i] = (int) Math.round(Math.random() * 9 + 1);
			System.out.print(mas[i] + " ");
		}
		System.out.println();
		for (int i = 0; i < 8; i++) {
			if (i % 2 != 0)
				mas[i] = 0;
			System.out.print(mas[i] + " ");
		}
	}

	/*
	 * Создайте 2 массива из 5 случайных целых чисел из отрезка [0;5] каждый,
	 * выведите массивы на экран в двух отдельных строках. Посчитайте среднее
	 * арифметическое элементов каждого массива и сообщите, для какого из
	 * массивов это значение оказалось больше (либо сообщите, что их средние
	 * арифметические равны).
	 */
	public static void test4() {
		int mas1[] = new int[5];
		int mas2[] = new int[5];
		double mid1 = 1, mid2 = 2;
		for (int i = 0; i < 5; i++) {
			mas1[i] = (int) Math.round(Math.random() * 5);
			mid1 = mid1 + mas1[i];
			System.out.print(mas1[i] + " ");
		}
		System.out.println();
		for (int i = 0; i < 5; i++) {
			mas2[i] = (int) Math.round(Math.random() * 5);
			mid2 = mid2 + mas2[i];
			System.out.print(mas2[i] + " ");
		}
		mid1 = mid1 / 5;
		mid2 = mid2 / 5;
		System.out.println();
		if (mid1 < mid2)
			System.out.println("mid1<mid2");
		else if (mid1 > mid2)
			System.out.println("mid1>mid2");
		else if (mid1 == mid2)
			System.out.println("mid1==mid2");
	}

	/*
	 * Создайте массив из 4 случайных целых чисел из отрезка [10;99], выведите
	 * его на экран в строку. Определить и вывести на экран сообщение о том,
	 * является ли массив строго возрастающей последовательностью.
	 */
	public static void test5() {
		int mas[] = new int[4];
		boolean gross = false;
		for (int i = 0; i < 4; i++) {
			mas[i] = (int) (Math.random() * 90 + 10);
			System.out.print(mas[i] + " ");
			if (i >= 1) {
				if (mas[i] <= mas[i - 1])
					gross = false;
			}
		}
		System.out.println();
		if (gross)
			System.out.println("gross");
		else
			System.out.println("not gross");
	}

	/*
	 * Создайте массив из 20-ти первых чисел Фибоначчи и выведите его на экран.
	 * Напоминаем, что первый и второй члены последовательности равны единицам,
	 * а каждый следующий — сумме двух предыдущих.
	 */
	public static void test6() {
		int temp = 0, a = 0, b = 1;
		int mas[] = new int[20];
		for (int i = 0; i < 20; i++) {
			temp = a;
			a = b;
			b = b + temp;
			mas[i] = b;
			System.out.print(mas[i] + " ");
		}
	}

	/*
	 * Создайте массив из 12 случайных целых чисел из отрезка [-15;15].
	 * Определите какой элемент является в этом массиве максимальным и сообщите
	 * индекс его последнего вхождения в массив.
	 */
	public static void test7() {
		int mas[] = new int[12];
		int max = 0, maxIndex = 0;
		for (int i = 0; i < 12; i++) {
			mas[i] = (int) (Math.round(Math.random() * 30 - 15));
			System.out.print(mas[i] + " ");
			if (i == 0) {
				max = mas[i];
				maxIndex = i;
			}
			if (i >= 1 && mas[i] > max) {
				max = mas[i];
				maxIndex = i;
			}
		}
		System.out.println("\nmax= " + max + " index= " + maxIndex);
	}

	/*
	 * Создайте два массива из 10 целых случайных чисел из отрезка [1;9] и
	 * третий массив из 10 действительных чисел. Каждый элемент с i-ым индексом
	 * третьего массива должен равняться отношению элемента из первого массива с
	 * i-ым индексом к элементу из второго массива с i-ым индексом. Вывести все
	 * три массива на экран (каждый на отдельной строке), затем вывести
	 * количество целых элементов в третьем массиве.
	 */
	public static void test8() {
		int counter = 0;
		int mas1[] = new int[10];
		int mas2[] = new int[10];
		double mas3[] = new double[10];
		for (int i = 0; i < 10; i++) {
			mas1[i] = (int) (Math.random() * 9 + 1);
			mas2[i] = (int) (Math.random() * 9 + 1);
			mas3[i] = Math.round(((double) mas1[i] / (double) mas2[i]) * 100.0) / 100.0;
			if (mas3[i] == (int) mas3[i])
				counter++;
		}
		for (int i = 0; i < 10; i++)
			System.out.print(mas1[i] + "\t");
		System.out.println();
		for (int i = 0; i < 10; i++)
			System.out.print(mas2[i] + "\t");
		System.out.println();
		for (int i = 0; i < 10; i++)
			System.out.print(mas3[i] + "\t");
		System.out.println("\n" + counter);
	}

	/*
	 * Создайте массив из 11 случайных целых чисел из отрезка [-1;1], выведите
	 * массив на экран в строку. Определите какой элемент встречается в массиве
	 * чаще всего и выведите об этом сообщение на экран. Если два каких-то
	 * элемента встречаются одинаковое количество раз, то не выводите ничего.
	 */
	public static void test9() {
		int negCount = 0, zerCount = 0, plusCount = 0;
		int mas[] = new int[11];
		for (int i = 0; i < 11; i++) {
			mas[i] = (int) (Math.random() * 3) - 1;
			System.out.print(mas[i] + " ");
			if (mas[i] == -1)
				negCount++;
			else if (mas[i] == 0)
				zerCount++;
			else
				plusCount++;
		}
		System.out.println();
		if (negCount > zerCount && negCount > plusCount)
			System.out.println("neg max " + negCount);
		else if (zerCount > negCount && zerCount > plusCount)
			System.out.println("zer max " + zerCount);
		else
			System.out.println("plus max " + plusCount);
	}

	/*
	 * Программа должна создать массив из 12 случайных целых чисел из отрезка
	 * [-10;10] таким образом, чтобы отрицательных и положительных элементов там
	 * было поровну и не было нулей. При этом порядок следования элементов
	 * должен быть случаен (т. е. не подходит вариант, когда в массиве постоянно
	 * выпадает сначала 6 положительных, а потом 6 отрицательных чисел или же
	 * когда элементы постоянно чередуются через один и пр.). Вывести полученный
	 * массив на экран.
	 */
	public static void test10() {
		int posMas[] = new int[6];
		int negMas[] = new int[6];
		int indexMas[] = new int[12];
		int resMas[] = new int[12];
		boolean markerIndex;
		int tempIdex;
		
		//<index>
		for(int i=0; i<indexMas.length; i++)
		{
			indexMas[i]=99999;
			do
			{
				tempIdex=(int)(Math.random()*12);
				markerIndex=false;
				for(int j=0; j<indexMas.length; j++)
				{
					if(tempIdex==indexMas[j]) markerIndex=true;
				}
			}while(markerIndex);
			indexMas[i]=tempIdex;
		}
		//</index>
		
		for(int i=0; i<posMas.length; i++)
		{
			posMas[i]=(int)(Math.random()*10+1);
			negMas[i]=(int)(Math.random()*(-10)-1);
		}
		
		for(int i=0; i<resMas.length; i++)
		{
			if(i<6)resMas[indexMas[i]]=posMas[i];
			if(i>=6)resMas[indexMas[i]]=negMas[i-6];
		}
		
		for(int i=0; i<resMas.length; i++)
		{
			System.out.print(resMas[i]+" ");
		}
		
	}

	/*Пользователь вводит с клавиатуры натуральное число большее 3, которое 
	 * сохраняется в переменную n. Если пользователь ввёл не подходящее число, 
	 * то программа должна просить пользователя повторить ввод. Создать массив 
	 * из n случайных целых чисел из отрезка [0;n] и вывести его на экран. 
	 * Создать второй массив только из чётных элементов первого массива, если 
	 * они там есть, и вывести его на экран.*/
	public static void test11() 
	{
//		Scanner str=new Scanner(System.in);
		int userNum=0,minNumer=3, oddArrIndex=0;
		int[] randArr;
		int[] oddArr;
		
		boolean flag=true, oddFlag=true;
		do
	{
			Scanner str=new Scanner(System.in);
			if(str.hasNextInt())
			{
				userNum=str.nextInt();
				if(userNum>minNumer) flag=false;
				else  System.out.println("erro");
			}
			else System.out.println("erro");
		}while(flag);

		randArr=new int[userNum];
		
		for (int i = 0; i < randArr.length; i++) 
		{
			randArr[i] = (int)(Math.random()*(userNum+1));
			if(randArr[i]%2==0) oddArrIndex++;
			System.out.print(randArr[i]+" ");
		}
		
		oddArr=new int[oddArrIndex];
		System.out.println();
		
		for (int i = 0,j=0; i < oddArrIndex; i++) 
		{
			do
			{
				oddFlag=true;
				if(randArr[j]%2==0)
				{
					oddArr[i]=randArr[j];
					oddFlag=false;
				}
				j++;
			}while(oddFlag);
			System.out.print(oddArr[i]+" ");
		}
		
	}

	public static void test12() {
	}

	public static void test13() {
	}

	public static void test14() {
	}

	public static void test15() {
	}

	public static void test16() {
	}

}
